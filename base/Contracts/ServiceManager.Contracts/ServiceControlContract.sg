///////////////////////////////////////////////////////////////////////////////
//
//  Microsoft Research Singularity
//
//  Copyright (c) Microsoft Corporation.  All rights reserved.
//
//  File:   Contracts\ServiceManager.Contracts\ServiceControlContracts.sg
//
//  Note:   SMS-clients contract
//
using Microsoft.Singsharp;
using Microsoft.Singularity.Channels;
using Microsoft.Singularity.Directory;

namespace Microsoft.Singularity.ServiceManager
{
    public enum ServiceError : uint
    {
        None = 0,

        ChannelClosed,
        NotFound,
        PermissionDenied,
        TryAgain,

        Unknown = 0xFFFFFFFF
    }

    public contract ServiceControlContract
    {
        out message Success();

        in message StartService();
        out message AckStartService();
        out message NakStartService(ServiceError err);

        in message StopService();
        out message AckStopService();
        out message NakStopService(ServiceError err);

        in message RestartService();
        out message AckRestartService();
        out message NakRestartService(ServiceError err);

        in message StartPoll(int interval);
        out message AckStartPoll();
        out message NakStartPoll(ServiceError err);

        in message StopPoll();
        out message AckStopPoll();
        out message NakStopPoll(ServiceError err);

        state Start : one {
            Success! -> Ready;
        }

        state Ready : one {
            StartService? ->        (AckStartService!
                                     or NakStartService!
                                    ) -> Ready;

            StopService? ->         (AckStopService!
                                     or NakStopService!
                                    ) -> Ready;

            RestartService? ->      (AckRestartService!
                                     or NakRestartService!
                                    ) -> Ready;

            StartPoll? ->           (AckStartPoll!
                                     or NakStartPoll!
                                    ) -> Ready;

            StopPoll? ->            (AckStopPoll!
                                     or NakStopPoll!
                                    ) -> Ready;
        }
    }
}
